#include "alphabet.h"
#include "M5Atom.h"

const bool kNumberShapes[kShapeSize*10]=
{
    // 0
    1,1,1,1,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,1,1,1,1,
    // 1
    0,1,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // 2
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    // 3
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    // 4
    1,0,0,1,0,
    1,0,0,1,0,
    1,0,0,1,0,
    1,1,1,1,1,
    0,0,0,1,0,
    // 5
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    // 6
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    // 7
    1,1,1,1,1,
    0,0,0,0,1,
    0,0,0,0,1,
    0,0,0,0,1,
    0,0,0,0,1,
    // 8
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    // 9
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
};

const bool kUppercaseShapes[kShapeSize*26]=
{
    // A
    0,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,1,
    1,0,0,0,1,
    // B
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    // C
    0,1,1,1,1,
    1,0,0,0,0,
    1,0,0,0,0,
    1,0,0,0,0,
    0,1,1,1,1,
    // D
    1,1,1,1,0,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,1,1,1,0,
    // E
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    // F
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    1,0,0,0,0,
    1,0,0,0,0,
    // G
    0,1,1,1,1,
    1,0,0,0,0,
    1,0,1,1,1,
    1,0,0,0,1,
    0,1,1,1,1,
    // H
    1,0,0,0,1,
    1,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,1,
    1,0,0,0,1,
    // I
    0,1,1,1,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,1,1,1,0,
    // J
    0,1,1,1,0,
    0,0,1,0,0,
    0,0,1,0,0,
    1,0,1,0,0,
    0,1,0,0,0,
    // K
    0,1,0,0,1,
    0,1,0,1,0,
    0,1,1,0,0,
    0,1,0,1,0,
    0,1,0,0,1,
    // L
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,1,1,1,
    // M
    1,0,0,0,1,
    1,1,0,1,1,
    1,0,1,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    // N
    1,0,0,0,1,
    1,1,0,0,1,
    1,0,1,0,1,
    1,0,0,1,1,
    1,0,0,0,1,
    // O
    0,1,1,1,0,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,1,1,0,
    // P
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    1,0,0,0,0,
    1,0,0,0,0,
    // Q
    0,1,1,1,0,
    1,0,0,0,1,
    1,0,1,0,1,
    1,0,0,1,0,
    0,1,1,0,1,
    // R
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    1,0,1,0,0,
    1,0,0,1,0,
    // S
    0,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,0,
    // T
    1,1,1,1,1,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // U
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,1,1,0,
    // V
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,0,1,0,
    0,1,0,1,0,
    0,0,1,0,0,
    // W
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,1,0,1,
    1,1,0,1,1,
    1,0,0,0,1,
    // X
    1,0,0,0,1,
    0,1,0,1,0,
    0,0,1,0,0,
    0,1,0,1,0,
    1,0,0,0,1,
    // Y
    1,0,0,0,1,
    0,1,0,1,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // Z
    1,1,1,1,1,
    0,0,0,1,0,
    0,0,1,0,0,
    0,1,0,0,0,
    1,1,1,1,1,
};

const bool kLowercaseShapes[kShapeSize*26]=
{
    // a
    0,1,1,1,0,
    0,0,0,1,0,
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    // b
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    // c
    0,0,0,0,0,
    0,0,0,0,0,
    0,1,1,1,0,
    0,1,0,0,0,
    0,1,1,1,0,
    // d
    0,0,0,1,0,
    0,0,0,1,0,
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    // e
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    0,1,0,0,0,
    0,1,1,1,0,
    // f
    0,0,1,1,0,
    0,0,1,0,0,
    0,1,1,1,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // g
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    0,0,0,1,0,
    0,1,1,1,0,
    // h
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,0,1,0,
    // i
    0,0,1,0,0,
    0,0,0,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // j
    0,0,1,0,0,
    0,0,0,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,1,1,0,0,
    // k
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,0,1,0,
    0,1,1,0,0,
    0,1,0,1,0,
    // l
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,1,0,
    // m
    0,0,0,0,0,
    0,0,0,0,0,
    1,1,1,1,1,
    1,0,1,0,1,
    1,0,1,0,1,
    // n
    0,0,0,0,0,
    0,0,0,0,0,
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,0,1,0,
    // o
    0,0,0,0,0,
    0,0,0,0,0,
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    // p
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    0,1,0,0,0,
    0,1,0,0,0,
    // q
    0,1,1,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    0,0,0,1,0,
    0,0,0,1,0,
    // r
    0,0,0,0,0,
    0,0,0,0,0,
    0,1,0,1,0,
    0,1,1,0,0,
    0,1,0,0,0,
    // s
    0,1,1,1,0,
    0,1,0,0,0,
    0,1,1,1,0,
    0,0,0,1,0,
    0,1,1,1,0,
    // t
    0,0,0,0,0,
    0,0,1,0,0,
    0,1,1,1,0,
    0,0,1,0,0,
    0,0,1,1,0,
    // u
    0,0,0,0,0,
    0,0,0,0,0,
    0,1,0,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    // v
    0,0,0,0,0,
    0,0,0,0,0,
    0,1,0,1,0,
    0,1,0,1,0,
    0,0,1,0,0,
    // w
    0,0,0,0,0,
    0,0,0,0,0,
    1,0,1,0,1,
    1,0,1,0,1,
    0,1,0,1,0,
    // x
    0,0,0,0,0,
    0,0,0,0,0,
    0,1,0,1,0,
    0,0,1,0,0,
    0,1,0,1,0,
    // y
    0,1,0,1,0,
    0,1,0,1,0,
    0,1,1,1,0,
    0,0,0,1,0,
    0,1,1,1,0,
    // z 
    0,1,1,1,0,
    0,0,0,1,0,
    0,0,1,0,0,
    0,1,0,0,0,
    0,1,1,1,0,
};

const bool kExternShapes[kShapeSize*8] = 
{
    // FULL
    1,1,1,1,1,
    1,1,1,1,1,
    1,1,1,1,1,
    1,1,1,1,1,
    1,1,1,1,1,
    // EMPTY
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    // MARU
    0,1,1,1,0,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,1,1,0,
    // BATSU
    1,0,0,0,1,
    0,1,0,1,0,
    0,0,1,0,0,
    0,1,0,1,0,
    1,0,0,0,1,
    // UP
    0,0,1,0,0,
    0,1,1,1,0,
    1,0,1,0,1,
    0,0,1,0,0,
    0,0,1,0,0,
    // DOWN
    0,0,1,0,0,
    0,0,1,0,0,
    1,0,1,0,1,
    0,1,1,1,0,
    0,0,1,0,0,
    // LEFT
    0,0,1,0,0,
    0,1,0,0,0,
    1,1,1,1,1,
    0,1,0,0,0,
    0,0,1,0,0,
    // RIGHT
    0,0,1,0,0,
    0,0,0,1,0,
    1,1,1,1,1,
    0,0,0,1,0,
    0,0,1,0,0,
};

const unsigned char kExternGraphs[kGraphSize*13]=
{   
    // WifiConnected
    0x05,
    0x05,
    0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0xff,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // WifiFailure
    0x05,
    0x05,
    0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0xff,0x00,0x00,
    0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x40,0x40,0x40, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00,
    0xff,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0xff,0x00,0x00,
    // WifiConnecting1
    0x05,
    0x05,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0xff,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // WifiConnecting2
    0x05,
    0x05,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // WifiConnecting3
    0x05,
    0x05,
    0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // Dji
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x04, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0xff,0x00,0x04, 0xff,0x00,0x04, 0xff,0x00,0x04, 0x00,0xff,0x00, 0x00,0x00,0xff,
    0xff,0x00,0x04, 0x00,0x00,0x00, 0xff,0x00,0x04, 0x00,0xff,0x00, 0x00,0x00,0xff,
    0xff,0x00,0x04, 0xff,0x00,0x04, 0xff,0x00,0x04, 0x00,0xff,0x00, 0x00,0x00,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00,
    // DjiD
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    // DjiJ
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0xff,0x00, 0x40,0x40,0x40,
    0x40,0x40,0x40, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0xff,0x00, 0x40,0x40,0x40,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0xff,0x00, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00,
    // DjiI
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0xff,
    0x40,0x40,0x40, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0xff,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    // Bluetooth
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x00,0x00,
    0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc,
    0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x00,0x00,
    0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x00,0x00,
    // Ros
    0x05,
    0x05,
    0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e,
    // MicroRos
    0x05,
    0x05,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x15,0x25,0x3e, 0x15,0x25,0x3e, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // TokyoTech
    0x05,
    0x05,
    0xdd,0xdd,0xdd, 0x00,0x00,0x00, 0x60,0x60,0x60, 0x00,0x00,0x00, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x60,0x60,0x60, 0x60,0x60,0x60, 0x60,0x60,0x60, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x00,0x00,0x00, 0x60,0x60,0x60, 0x00,0x00,0x00, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x60,0x60,0x60, 0x00,0x00,0x00, 0x60,0x60,0x60, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xdd,0xdd,0xdd,
};

const unsigned long kRainbow[7]=
{
    0xff0000, 0xfa5000, 0xffff00, 0x008000, 0x0000ff, 0x4b0082, 0xee82ee,
};

void Alphabet::Init(void){
    M5.begin(true, false, true);
    delay(200);
}

void Alphabet::SetText(char letter){
    int idx;
    // numbers
    if (letter >= 48 && letter <= 57){
        idx = letter - 48;
        GenShape(idx, kNumberShapes);
        GenGraph();
    }
    // uppercase letters
    else if (letter >= 65 && letter <= 90){
        idx = letter - 65;
        GenShape(idx, kUppercaseShapes);
        GenGraph();
    }
    // lowercase letters
    else if (letter >= 97 && letter <= 122){
        idx = letter - 97;
        GenShape(idx, kLowercaseShapes);
        GenGraph();
    }
}

void Alphabet::SetText(int number){
    if (number >=0 && number <=9){
        GenShape(number, kNumberShapes);
        GenGraph();
    }
}

void Alphabet::GenShape(int index, const bool *shapes){
    for (int i = 0; i < kShapeSize; i++){
        shape[i] = shapes[index*kShapeSize+i];
    }
}

void Alphabet::GenGraph(void){
    graph[0] = kWidth;
    graph[1] = kHeight;
    for (int i = 0; i < kShapeSize; i++){
        if (shape[i] == true){
            graph[3*i+2] = color[0];
            graph[3*i+3] = color[1];
            graph[3*i+4] = color[2];
        }
        else if (shape[i] == false){
            graph[3*i+2] = 0x00;
            graph[3*i+3] = 0x00;
            graph[3*i+4] = 0x00;
        }
    }
}

void Alphabet::SetColor(unsigned char r, unsigned char g, unsigned char b){
    color[0] = r;
    color[1] = g;
    color[2] = b;
}

void Alphabet::SetColor(unsigned long rgb){
    color[0] = (rgb&0xff0000)/0x10000;
    color[1] = (rgb&0xff00)/0x100;
    color[2] = rgb&0xff;
}

void Alphabet::Display(void){
    M5.dis.displaybuff((uint8_t *)graph);
}

void Alphabet::Display(char letter){
    SetText(letter);
    Display();
}

void Alphabet::Display(char letter, unsigned long rgb){
    SetColor(rgb);
    Display(letter);
}

void Alphabet::Display(int number){
    SetText(number);
    Display();
}

void Alphabet::Display(int number, unsigned long rgb){
    SetColor(rgb);
    Display(number);
}

void Alphabet::Display(extern_shape_t extern_shape){
    for (int i = 0; i < kShapeSize; i++){
        shape[i] = kExternShapes[extern_shape*kShapeSize+i];
    }
    GenGraph();
    Display();
}

void Alphabet::Display(extern_shape_t extern_shape, unsigned long rgb){
    SetColor(rgb);
    Display(extern_shape);
}

void Alphabet::Display(extern_graph_t extern_graph){
    for (int i = 0; i < kGraphSize; i++){
        graph[i] = kExternGraphs[extern_graph*kGraphSize+i];
    }
    Display();
}