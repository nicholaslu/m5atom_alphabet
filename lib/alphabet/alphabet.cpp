#include "alphabet.h"
#include "M5Atom.h"

bool number_shapes[SHAPE_SIZE*10]=
{
    // 0
    1,1,1,1,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,1,1,1,1,
    // 1
    0,1,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // 2
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    // 3
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    // 4
    1,0,0,1,0,
    1,0,0,1,0,
    1,0,0,1,0,
    1,1,1,1,1,
    0,0,0,1,0,
    // 5
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
    // 6
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    // 7
    1,1,1,1,1,
    0,0,0,0,1,
    0,0,0,0,1,
    0,0,0,0,1,
    0,0,0,0,1,
    // 8
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    // 9
    1,1,1,1,1,
    1,0,0,0,1,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,1,
};

bool uppercase_shapes[SHAPE_SIZE*26]=
{
    // A
    0,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,1,
    1,0,0,0,1,
    // B
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    // C
    0,1,1,1,1,
    1,0,0,0,0,
    1,0,0,0,0,
    1,0,0,0,0,
    0,1,1,1,1,
    // D
    1,1,1,1,0,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,1,1,1,0,
    // E
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    // F
    1,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    1,0,0,0,0,
    1,0,0,0,0,
    // G
    0,1,1,1,1,
    1,0,0,0,0,
    1,0,1,1,1,
    1,0,0,0,1,
    0,1,1,1,1,
    // H
    1,0,0,0,1,
    1,0,0,0,1,
    1,1,1,1,1,
    1,0,0,0,1,
    1,0,0,0,1,
    // I
    0,1,1,1,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,1,1,1,0,
    // J
    0,1,1,1,0,
    0,0,1,0,0,
    0,0,1,0,0,
    1,0,1,0,0,
    0,1,0,0,0,
    // K
    0,1,0,0,1,
    0,1,0,1,0,
    0,1,1,0,0,
    0,1,0,1,0,
    0,1,0,0,1,
    // L
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,0,0,0,
    0,1,1,1,1,
    // M
    1,0,0,0,1,
    1,1,0,1,1,
    1,0,1,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    // N
    1,0,0,0,1,
    1,1,0,0,1,
    1,0,1,0,1,
    1,0,0,1,1,
    1,0,0,0,1,
    // O
    0,1,1,1,0,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,1,1,0,
    // P
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    1,0,0,0,0,
    1,0,0,0,0,
    // Q
    0,1,1,1,0,
    1,0,0,0,1,
    1,0,1,0,1,
    1,0,0,1,0,
    0,1,1,0,1,
    // R
    1,1,1,1,0,
    1,0,0,0,1,
    1,1,1,1,0,
    1,0,1,0,0,
    1,0,0,1,0,
    // S
    0,1,1,1,1,
    1,0,0,0,0,
    1,1,1,1,1,
    0,0,0,0,1,
    1,1,1,1,0,
    // T
    1,1,1,1,1,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // U
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,1,1,0,
    // V
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,0,1,0,
    0,1,0,1,0,
    0,0,1,0,0,
    // W
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,1,0,1,
    1,1,0,1,1,
    1,0,0,0,1,
    // X
    1,0,0,0,1,
    0,1,0,1,0,
    0,0,1,0,0,
    0,1,0,1,0,
    1,0,0,0,1,
    // Y
    1,0,0,0,1,
    0,1,0,1,0,
    0,0,1,0,0,
    0,0,1,0,0,
    0,0,1,0,0,
    // Z
    1,1,1,1,1,
    0,0,0,1,0,
    0,0,1,0,0,
    0,1,0,0,0,
    1,1,1,1,1,
};

bool lowercase_shapes[SHAPE_SIZE*26]=
{
};

bool extern_shapes[SHAPE_SIZE*8] = 
{
    // FULL
    1,1,1,1,1,
    1,1,1,1,1,
    1,1,1,1,1,
    1,1,1,1,1,
    1,1,1,1,1,
    // EMPTY
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    // MARU
    0,1,1,1,0,
    1,0,0,0,1,
    1,0,0,0,1,
    1,0,0,0,1,
    0,1,1,1,0,
    // BATSU
    1,0,0,0,1,
    0,1,0,1,0,
    0,0,1,0,0,
    0,1,0,1,0,
    1,0,0,0,1,
    // UP
    0,0,1,0,0,
    0,1,1,1,0,
    1,0,1,0,1,
    0,0,1,0,0,
    0,0,1,0,0,
    // DOWN
    0,0,1,0,0,
    0,0,1,0,0,
    1,0,1,0,1,
    0,1,1,1,0,
    0,0,1,0,0,
    // LEFT
    0,0,1,0,0,
    0,1,0,0,0,
    1,1,1,1,1,
    0,1,0,0,0,
    0,0,1,0,0,
    // RIGHT
    0,0,1,0,0,
    0,0,0,1,0,
    1,1,1,1,1,
    0,0,0,1,0,
    0,0,1,0,0,
};

unsigned char extern_graphs[GRAPH_SIZE*13]=
{   
    // WIFI_CONNECTED
    0x05,
    0x05,
    0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0xff,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // WIFI_FAILURE
    0x05,
    0x05,
    0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0xff,0x00,0x00,
    0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x40,0x40,0x40, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00,
    0xff,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0xff,0x00,0x00,
    // WIFI_CONNECTING_1
    0x05,
    0x05,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0xff,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // WIFI_CONNECTING_2
    0x05,
    0x05,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // WIFI_CONNECTING_3
    0x05,
    0x05,
    0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff, 0xff,0xff,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // DJI
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x04, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0xff,0x00,0x04, 0xff,0x00,0x04, 0xff,0x00,0x04, 0x00,0xff,0x00, 0x00,0x00,0xff,
    0xff,0x00,0x04, 0x00,0x00,0x00, 0xff,0x00,0x04, 0x00,0xff,0x00, 0x00,0x00,0xff,
    0xff,0x00,0x04, 0xff,0x00,0x04, 0xff,0x00,0x04, 0x00,0xff,0x00, 0x00,0x00,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00,
    // DJI_D
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    // DJI_J
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0xff,0x00, 0x40,0x40,0x40,
    0x40,0x40,0x40, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0xff,0x00, 0x40,0x40,0x40,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0xff,0x00, 0x40,0x40,0x40,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00,
    // DJI_I
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0xff,
    0x40,0x40,0x40, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0xff,
    0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0xff,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x40,0x40,0x40, 0x40,0x40,0x40, 0x00,0x00,0x00,
    // BT
    0x05,
    0x05,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x00,0x00,
    0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc,
    0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x00,0x00,
    0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x00,0x00, 0x00,0x83,0xfc,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x83,0xfc, 0x00,0x83,0xfc, 0x00,0x00,0x00,
    // ROS
    0x05,
    0x05,
    0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e,
    // micro_ROS
    0x05,
    0x05,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x15,0x25,0x3e, 0x15,0x25,0x3e, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x15,0x25,0x3e, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
    // TOKYO_TECH
    0x05,
    0x05,
    0xdd,0xdd,0xdd, 0x00,0x00,0x00, 0x60,0x60,0x60, 0x00,0x00,0x00, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x60,0x60,0x60, 0x60,0x60,0x60, 0x60,0x60,0x60, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x00,0x00,0x00, 0x60,0x60,0x60, 0x00,0x00,0x00, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x60,0x60,0x60, 0x00,0x00,0x00, 0x60,0x60,0x60, 0xdd,0xdd,0xdd,
    0xdd,0xdd,0xdd, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xdd,0xdd,0xdd,
};

unsigned long rainbow[7]=
{
    0xff0000, 0xfa5000, 0xffff00, 0x008000, 0x0000ff, 0x4b0082, 0xee82ee
};

void Alphabet::init(void){
    // enable display
    // M5.begin(true, false, true);
}

void Alphabet::set_text(char letter){
    int idx;
    // numbers
    if (letter >= 48 && letter <= 57){
        idx = letter - 48;
        gen_shape(idx, number_shapes);
        gen_graph();
    }
    // uppercase letters
    else if (letter >= 65 && letter <= 90){
        idx = letter - 65;
        gen_shape(idx, uppercase_shapes);
        gen_graph();
    }
    // lowercase letters
    else if (letter >= 97 && letter <= 122){
        idx = letter - 97;
        gen_shape(idx, lowercase_shapes);
        gen_graph();
    }
}

void Alphabet::set_text(int number){
    if (number >=0 && number <=9){
        gen_shape(number, number_shapes);
        gen_graph();
    }
}

void Alphabet::gen_shape(int index, bool *shapes){
    for (int i = 0; i < SHAPE_SIZE; i++){
        shape[i] = shapes[index*SHAPE_SIZE+i];
    }
}

void Alphabet::gen_graph(void){
    graph[0] = WIDTH;
    graph[1] = HEIGHT;
    for (int i = 0; i < SHAPE_SIZE; i++){
        if (shape[i] == true){
            graph[3*i+2] = color[0];
            graph[3*i+3] = color[1];
            graph[3*i+4] = color[2];
        }
        else if (shape[i] == false){
            graph[3*i+2] = 0x00;
            graph[3*i+3] = 0x00;
            graph[3*i+4] = 0x00;
        }
    }
}

void Alphabet::set_color(unsigned char r, unsigned char g, unsigned char b){
    color[0] = r;
    color[1] = g;
    color[2] = b;
}

void Alphabet::set_color(unsigned long rgb){
    color[0] = (rgb&0xff0000)/0x10000;
    color[1] = (rgb&0xff00)/0x100;
    color[2] = rgb&0xff;
}

void Alphabet::display(void){
    M5.dis.displaybuff((uint8_t *)graph);
}

void Alphabet::display(char letter){
    set_text(letter);
    display();
}

void Alphabet::display(char letter, unsigned long rgb){
    set_color(rgb);
    display(letter);
}

void Alphabet::display(int number){
    set_text(number);
    display();
}

void Alphabet::display(int number, unsigned long rgb){
    set_color(rgb);
    display(number);
}

void Alphabet::display(extern_shape_t extern_shape){
    for (int i = 0; i < SHAPE_SIZE; i++){
        shape[i] = extern_shapes[extern_shape*SHAPE_SIZE+i];
    }
    gen_graph();
    display();
}

void Alphabet::display(extern_shape_t extern_shape, unsigned long rgb){
    set_color(rgb);
    display(extern_shape);
}

void Alphabet::display(extern_graph_t extern_graph){
    for (int i = 0; i < GRAPH_SIZE; i++){
        graph[i] = extern_graphs[extern_graph*GRAPH_SIZE+i];
    }
    display();
}